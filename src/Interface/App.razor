@namespace Brighid.Identity.Interface

@implements IDisposable
@inject PersistentComponentState ApplicationState
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<Router AppAssembly="@typeof(Program).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code
{
    private PersistingComponentStateSubscription persistingSubscription;

    public bool IsAuthenticated { get; set; }

    protected async override Task OnInitializedAsync()
    {
        persistingSubscription = ApplicationState.RegisterOnPersisting(Persist);
        IsAuthenticated = await GetIsAuthenticated();

        if (!IsAuthenticated)
        {
            var relativePath = new Uri(NavigationManager.Uri).AbsolutePath;
            var redirectUri = Uri.EscapeDataString(relativePath);
            NavigationManager.NavigateTo($"login?redirect_uri={redirectUri}", true);
        }
    }

    private async ValueTask<bool> GetIsAuthenticated()
    {
        if (ApplicationState.TryTakeFromJson<bool>(nameof(IsAuthenticated), out var isAuthenticated))
        {
            return isAuthenticated;
        }

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state?.User;
        return user?.Identity?.IsAuthenticated ?? false;
    }

    private Task Persist()
    {
        ApplicationState.PersistAsJson(nameof(IsAuthenticated), IsAuthenticated);
        return Task.CompletedTask;
    }

    public void Dispose()
    {
        persistingSubscription.Dispose();
    }
}