Description: Brighid Identity
Parameters:
  Image:
    Type: String
    Description: Docker Image uri to pull.

  DomainName:
    Type: String
    Description: Domain name to use.

  DatabaseName:
    Type: String
    Description: The name of the database to use.

  DatabaseUser:
    Type: String
    Description: The name of the database user to use.

  DatabasePassword:
    Type: String
    Description: The encrypted database password.

  CookieDomain:
    Type: String
    Description: The domain name to use for the session cookie.

  EnvoyImage:
    Type: String
    Description: Image to use for the Envoy Sidecar.

  MeshNodeName:
    Type: String
    Description: Name to use for the node in the App Mesh.

Resources:
  MeshService:
    Type: AWS::AppMesh::VirtualService
    Properties:
      MeshName: brighid-mesh
      MeshOwner: !ImportValue cfn-metadata:SharedAccountId
      VirtualServiceName: !Ref DomainName
      Spec:
        Provider:
          VirtualNode:
            VirtualNodeName: !GetAtt MeshNode.VirtualNodeName

  MeshNode:
    Type: AWS::AppMesh::VirtualNode
    Properties:
      MeshName: brighid-mesh
      MeshOwner: !ImportValue cfn-metadata:SharedAccountId
      VirtualNodeName: !Ref MeshNodeName
      Spec:
        Listeners:
          - PortMapping:
              Port: 80
              Protocol: http
            HealthCheck:
              UnhealthyThreshold: 3
              HealthyThreshold: 5
              TimeoutMillis: 30000
              Path: /healthcheck
              Protocol: http
              IntervalMillis: 30000
        ServiceDiscovery:
          AWSCloudMap:
            NamespaceName: !ImportValue brighid-infrastructure:ServiceRegistryName
            ServiceName: identity

  MeshGatewayRoute:
    Type: Custom::MeshGatewayRoute
    Properties:
      ServiceToken: !ImportValue cfn-gateway-route-resource:GatewayRouteLambdaArn
      MeshName: brighid-mesh
      MeshOwner: !ImportValue cfn-metadata:SharedAccountId
      VirtualGatewayName: internet
      GatewayRouteName: !Ref MeshNodeName
      Spec:
        HttpRoute:
          Action:
            Target:
              VirtualService:
                VirtualServiceName: !GetAtt MeshService.VirtualServiceName
          Match:
            Prefix: /
            Hostname:
              Exact: !Ref DomainName

  ServiceRegistryRecord:
    Type: AWS::ServiceDiscovery::Service
    Properties: 
      Description: Internal Discovery Service for Brighid
      DnsConfig:
        RoutingPolicy: MULTIVALUE
        DnsRecords:
          - TTL: 60
            Type: A
          - TTL: 60
            Type: SRV
      HealthCheckCustomConfig:
        FailureThreshold: 1
      NamespaceId: !ImportValue brighid-infrastructure:ServiceRegistry
      Name: identity

  DecryptedClientSecret:
    Type: Custom::Secret
    Properties:
      ServiceToken: !ImportValue cfn-secret-resource:SecretLambdaArn
      EncryptionRoleArn: !ImportValue cfn-secret-resource:EncryptionRoleArn
      Ciphertext: !ImportValue sso-aws:GoogleClientSecret

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !ImportValue cfn-utilities:HttpListenerArn
      Priority: 5
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref DomainName

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetType: ip
      VpcId: !ImportValue cfn-utilities:VpcId
      Protocol: HTTP
      Port: 80
      HealthCheckPath: /healthcheck
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "30"

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !ImportValue brighid-infrastructure:ClusterName
      ServiceName: !Ref AWS::StackName
      LaunchType: FARGATE
      EnableECSManagedTags: true
      PropagateTags: TASK_DEFINITION
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: !Split
            - ","
            - !ImportValue cfn-utilities:SubnetIds
          SecurityGroups:
            - !ImportValue cfn-utilities:WebSecurityGroupId
            - !ImportValue cfn-utilities:EnvoySecurityGroupId
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: !Ref AWS::StackName
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceRegistryRecord.Arn
          Port: 80
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      DeploymentConfiguration:
        MinimumHealthyPercent: 1
        MaximumPercent: 200
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: "256"
      Memory: "512"
      Family: !Ref AWS::StackName
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt TaskRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      RequiresCompatibilities:
        - FARGATE
      ProxyConfiguration:
        Type: APPMESH
        ContainerName: envoy
        ProxyConfigurationProperties:
          - Name: IgnoredUID
            Value: "1337"
          - Name: ProxyIngressPort
            Value: "15000"
          - Name: ProxyEgressPort
            Value: "15001"
          - Name: AppPorts
            Value: "80"
          - Name: EgressIgnoredIPs
            Value: 169.254.170.2,169.254.169.254
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Essential: true
          Image: !Ref Image
          DependsOn:
            - ContainerName: envoy
              Condition: HEALTHY
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: brighid
          Environment:
            - Name: Database__Host
              Value: !ImportValue mutedac:ClusterAddress
            - Name: Database__Name
              Value: !Ref DatabaseName
            - Name: Database__User
              Value: !Ref DatabaseUser
            - Name: Encrypted__Database__Password
              Value: !Ref DatabasePassword
            - Name: EncryptionOptions__KmsKeyId
              Value: alias/SecretsKey
            - Name: OpenId__DomainName
              Value: !Ref DomainName
            - Name: Network__InternalIpv4Cidr
              Value: !ImportValue cfn-utilities:Ipv4NetworkCidr
            - Name: App__CookieDomain
              Value: !Ref CookieDomain
        - Name: envoy
          Image: !Ref EnvoyImage
          Essential: true
          User: "1337"
          Ulimits:
            - Name: nofile
              HardLimit: 15000
              SoftLimit: 15000
          PortMappings:
            - ContainerPort: 9901
            - ContainerPort: 15000
            - ContainerPort: 15001
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -s http://localhost:9901/server_info | grep state | grep -q LIVE
            Interval: 5
            Timeout: 2
            Retries: 3
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: brighid
          Environment:
            - Name: APPMESH_RESOURCE_ARN
              Value: !Sub
                - mesh/brighid-mesh@${SharedAccountId}/virtualNode/${MeshNode.VirtualNodeName}
                - SharedAccountId: !ImportValue cfn-metadata:SharedAccountId

  ApplicationTopic:
    Type: AWS::SNS::Topic
    
  ApplicationTopicSubscription:
    Type: AWS::SNS::Subscription
    DependsOn:
      - Service
    Properties:
      Protocol: https
      TopicArn: !Ref ApplicationTopic
      Endpoint: !Sub https://${DomainName}/api/applications
  
  ApplicationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: "*"
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
                - !Sub 
                  - arn:aws:iam::${MasterAccountId}:root
                  - MasterAccountId: !ImportValue cfn-utilities:MasterAccountId
      Topics:
        - !Ref ApplicationTopic

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - !ImportValue cfn-utilities:SecretsKeyDecryptPolicyArn
        - !ImportValue cfn-utilities:SecretsKeyEncryptPolicyArn
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: ecs-tasks.amazonaws.com

  TaskPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref TaskRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: ssm:GetParameter
            Resource: 
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/brighid/*/account-link/start-url

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

Outputs:
  ApplicationTopicArn:
    Value: !Ref ApplicationTopic
    Description: ARN of the application topic used for creating/updating/deleting identity client applications.
    Export:
      Name: !Sub ${AWS::StackName}:ApplicationTopicArn